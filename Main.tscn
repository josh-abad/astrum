[gd_scene load_steps=25 format=2]

[ext_resource path="res://Main.gd" type="Script" id=1]
[ext_resource path="res://Planet.tscn" type="PackedScene" id=2]
[ext_resource path="res://Spike.tscn" type="PackedScene" id=3]
[ext_resource path="res://Collectible.tscn" type="PackedScene" id=4]
[ext_resource path="res://Spark.tscn" type="PackedScene" id=5]
[ext_resource path="res://ScoredPopup.tscn" type="PackedScene" id=6]
[ext_resource path="res://Assets/Parallax/Background.png" type="Texture" id=7]
[ext_resource path="res://Assets/Parallax/Stars.png" type="Texture" id=8]
[ext_resource path="res://icon.png" type="Texture" id=9]
[ext_resource path="res://BlackHole.tscn" type="PackedScene" id=10]
[ext_resource path="res://HUD.tscn" type="PackedScene" id=11]
[ext_resource path="res://Audio/Ambient.ogg" type="AudioStream" id=12]
[ext_resource path="res://Audio/BlackHoleActive.ogg" type="AudioStream" id=13]
[ext_resource path="res://Audio/BlackHoleTransition.wav" type="AudioStream" id=14]
[ext_resource path="res://Audio/Hit.wav" type="AudioStream" id=15]
[ext_resource path="res://Audio/CollectibleSound.ogg" type="AudioStream" id=16]
[ext_resource path="res://Audio/Bounce.wav" type="AudioStream" id=17]
[ext_resource path="res://Player.tscn" type="PackedScene" id=18]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int blurSize : hint_range(0,20);

void fragment()
{
COLOR = textureLod(SCREEN_TEXTURE, SCREEN_UV, float(blurSize)/10.0);
}

"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/blurSize = 0

[sub_resource type="CanvasItemMaterial" id=3]

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform vec2 offset;
uniform float scale:hint_range(0.5, 1000.0);

// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

vec3 mod289_3(vec3 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289_2(vec2 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
    return mod289_3(((x*34.0)+1.0)*x);
}

float snoise(vec2 v) {
    vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                  0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                 -0.577350269189626,  // -1.0 + 2.0 * C.x
                  0.024390243902439); // 1.0 / 41.0
    // First corner
    vec2 i  = floor(v + dot(v, C.yy) );
    vec2 x0 = v -   i + dot(i, C.xx);
    
    // Other corners
    vec2 i1;
    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
    //i1.y = 1.0 - i1.x;
    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    // x0 = x0 - 0.0 + 0.0 * C.xx ;
    // x1 = x0 - i1 + 1.0 * C.xx ;
    // x2 = x0 - 1.0 + 2.0 * C.xx ;
    vec4 x12 = vec4(x0.xy, x0.xy) + C.xxzz;
    x12.xy -= i1;
    
    // Permutations
    i = mod289_2(i); // Avoid truncation effects in permutation
    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
    	+ i.x + vec3(0.0, i1.x, 1.0 ));
    
    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), vec3(0.0));
    m = m*m ;
    m = m*m ;
    
    // Gradients: 41 points uniformly over a line, mapped onto a diamond.
    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
    
    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;
    
    // Normalise gradients implicitly by scaling m
    // Approximation of: m *= inversesqrt( a0*a0 + h*h );
    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
    
    // Compute final noise value at P
    vec3 g;
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

void fragment() {
    float n = snoise((UV + offset) * scale) * 0.5 + 0.5;
    COLOR.rgb = vec3(n);
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/offset = null
shader_param/scale = 500.0

[sub_resource type="Environment" id=6]
background_mode = 4
background_canvas_max_layer = 1
tonemap_mode = 2
auto_exposure_scale = 0.1
auto_exposure_max_luma = 4.0
dof_blur_far_distance = 0.01
glow_enabled = true
glow_levels/2 = true
glow_levels/7 = true
glow_bloom = 0.2
glow_blend_mode = 1
glow_hdr_threshold = 2.0
glow_hdr_luminance_cap = 24.0
glow_bicubic_upscale = true
adjustment_enabled = true
adjustment_saturation = 1.25

[node name="Main" type="Node"]
script = ExtResource( 1 )
Planet = ExtResource( 2 )
Spike = ExtResource( 3 )
Collectible = ExtResource( 4 )
Spark = ExtResource( 5 )
ScoredPopup = ExtResource( 6 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]
layer = -2

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 0.5, 0.5 )

[node name="Background" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
self_modulate = Color( 0.796078, 0.156863, 0.639216, 1 )
position = Vector2( -1152, -64 )
scale = Vector2( 5, 5 )
texture = ExtResource( 7 )
region_enabled = true
region_rect = Rect2( 0, 0, 1e+006, 1e+006 )

[node name="Stars" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
self_modulate = Color( 0.980392, 0.121569, 0.47451, 1 )
position = Vector2( -1280, -96 )
texture = ExtResource( 8 )
region_enabled = true
region_rect = Rect2( 0, 0, 1e+006, 1e+006 )

[node name="BackgroundModulate" type="CanvasModulate" parent="ParallaxBackground/ParallaxLayer"]
visible = false
color = Color( 0.490196, 0.490196, 0.490196, 1 )

[node name="BlurLayer" type="CanvasLayer" parent="ParallaxBackground/ParallaxLayer"]
layer = -2

[node name="Blur" type="Sprite" parent="ParallaxBackground/ParallaxLayer/BlurLayer"]
material = SubResource( 2 )
position = Vector2( 0, 154 )
scale = Vector2( 19, 20.5 )
texture = ExtResource( 9 )

[node name="ParallaxForeground" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxForeground"]
motion_scale = Vector2( 0.7, 0.7 )

[node name="Stars" type="Sprite" parent="ParallaxForeground/ParallaxLayer"]
self_modulate = Color( 0.968627, 0.654902, 0.341176, 1 )
position = Vector2( -1280, -96 )
rotation = -3.14159
texture = ExtResource( 8 )
region_enabled = true
region_rect = Rect2( 0, 0, 1e+006, 1e+006 )

[node name="ForegroundModulate" type="CanvasModulate" parent="ParallaxForeground/ParallaxLayer"]
visible = false
self_modulate = Color( 0.94902, 0.203922, 0.482353, 1 )
color = Color( 0.490196, 0.490196, 0.490196, 1 )

[node name="Tween" type="Tween" parent="."]

[node name="UpgradeSystem" type="Node" parent="."]

[node name="StartTimer" type="Timer" parent="."]
one_shot = true

[node name="CollectibleTimer" type="Timer" parent="."]
wait_time = 5.0
one_shot = true

[node name="PlanetTimer" type="Timer" parent="."]
wait_time = 0.25

[node name="BlackHoleTimer" type="Timer" parent="."]
wait_time = 2.0
one_shot = true

[node name="SpikeTimer" type="Timer" parent="."]
wait_time = 4.0

[node name="ComboTimer" type="Timer" parent="."]
one_shot = true

[node name="SlowMotionTimer" type="Timer" parent="."]
wait_time = 0.35
one_shot = true

[node name="MainModulate" type="CanvasModulate" parent="."]
visible = false
material = SubResource( 3 )
color = Color( 0.490196, 0.490196, 0.490196, 1 )

[node name="BlackHole" parent="." instance=ExtResource( 10 )]
visible = false
position = Vector2( 340, 90 )

[node name="HUD" parent="." instance=ExtResource( 11 )]

[node name="AmbientSound" type="AudioStreamPlayer" parent="."]
pause_mode = 2
stream = ExtResource( 12 )
volume_db = -0.5
pitch_scale = 1.05
bus = "Ambient"

[node name="BlackHoleActiveSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 13 )
bus = "SFX"

[node name="BlackHoleTransitionSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 14 )
bus = "SFX"

[node name="HitSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 15 )
bus = "SFX"

[node name="CollectibleSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 16 )
bus = "SFX"

[node name="BounceSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 17 )
pitch_scale = 2.0
bus = "SFX"

[node name="Noise" type="Sprite" parent="."]
visible = false
modulate = Color( 1, 1, 1, 0.0392157 )
material = SubResource( 5 )
texture = ExtResource( 9 )
region_enabled = true
region_rect = Rect2( 0, 0, 20000, 20000 )

[node name="Player" parent="." groups=[
"Balls",
] instance=ExtResource( 18 )]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 6 )
[connection signal="timeout" from="StartTimer" to="." method="_on_StartTimer_timeout"]
[connection signal="timeout" from="CollectibleTimer" to="." method="_on_CollectibleTimer_timeout"]
[connection signal="timeout" from="PlanetTimer" to="." method="_on_PlanetTimer_timeout"]
[connection signal="timeout" from="BlackHoleTimer" to="." method="_on_BlackHoleTimer_timeout"]
[connection signal="timeout" from="SpikeTimer" to="." method="_on_SpikeTimer_timeout"]
[connection signal="timeout" from="ComboTimer" to="." method="_on_ComboTimer_timeout"]
[connection signal="timeout" from="SlowMotionTimer" to="." method="_on_SlowMotionTimer_timeout"]
[connection signal="absorb" from="BlackHole" to="." method="_on_BlackHole_absorb"]
[connection signal="inactive" from="BlackHole" to="." method="_on_BlackHole_inactive"]
[connection signal="start_game" from="HUD" to="." method="new_game"]
[connection signal="nor_mo" from="Player" to="." method="_on_Comet_nor_mo"]
[connection signal="slo_mo" from="Player" to="." method="_on_Comet_slo_mo"]
